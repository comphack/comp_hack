<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section>
<title>Client Updater with Nginx</title>

<section>
<title>Overview</title>

<para>
	This section of the guide will describe installation and setup of a client update server on an Ubuntu 16.04 LTS (<ulink url="https://www.ubuntu.com">https://www.ubuntu.com</ulink>) system with Nginx. Installation on other systems should be possible and this guide could be adapted for such a system; however, installation on these systems won't be described here. Similarly, DNS setup, connecting to and maintaining a Linux server, basic Linux commands, basic SQL and web development are out of the scope of this document. Please look elsewhere online for an excellent selection of guides, tutorials and videos on these topics.
</para>

</section><!-- Overview -->

<section>
<title>Installing Nginx</title>

<para>
	You just need to install the package as follows:
</para>

<para><programlisting>
sudo apt-get update
sudo apt-get install nginx
</programlisting></para>

</section><!-- Installing Nginx -->

<section>
<title>Client Files</title>

<para>
	Before you start, refer back to the Linux install section and make sure the tools are installed (the main server package isn't really required). Make sure you can run this command:
</para>

<para><programlisting>
comp_rehash
</programlisting></para>

<para>
	You should see output like this:
</para>

<para><programlisting>
SYNTAX: comp_rehash --base BASE --overlay OVERLAY
</programlisting></para>

<para>
	Now create a directory for the client files updater:
</para>

<para><programlisting>
sudo mkdir /var/www/updates
sudo chown `whoami`:`whoami` /var/www/updates
mkdir -p /var/www/updates/files/{base,overlay}
</programlisting></para>

<para>
	Now upload the original 1.666 update files (obtained elsewhere) into <emphasis>/var/www/updates/base</emphasis>. You should see the <emphasis>.compressed</emphasis> files as well as the <emphasis>hashlist.dat</emphasis>. The directory should look like the following:
</para>

<para><programlisting>
Avatar                        ImagineClient.dat             msvcp71.dll
BinaryData                    ImagineClient.exe             msvcp71.dll.compressed
casket                        ImagineClient.exe.compressed  msvcr71.dll
Devil                         ImagineOption.exe             msvcr71.dll.compressed
effect                        ImagineOption.exe.compressed  NPC
Event                         ImagineUpdate.exe             redist
GungHoUpdate.dat              ImagineUpdate.exe.compressed  rtdlist.pfl
GungHoUpdate.dat.compressed   Interface                     Shaders
GunHoUpdate.dat               Map                           sound
GunHoUpdate.dat.compressed    MSNUpdate.dat                 Title
HangameUpdate.dat             MSNUpdate.dat.compressed      webaccess.sdat
HangameUpdate.dat.compressed  mss32.dll
hashlist.dat                  mss32.dll.compressed
</programlisting></para>

<para>
	Now upload the files you wish to replace or add into <emphasis>/var/www/updates/overlay</emphasis>. This could include:
</para>

<para>
<itemizedlist>
	<listitem><para>Re-encrypted BinaryData files.</para></listitem>
	<listitem><para>Client executable patch.</para></listitem>
	<listitem><para>Alternate client updater.</para></listitem>
	<listitem><para>New or modified content.</para></listitem>
</itemizedlist>
</para>

<para>
	The alternate client updater is included as part of the server software. You can download it in the zip release to avoid an install of the server software. Once the various files have been added the directory may look similar to the following:
</para>

<para><programlisting>
bearer               libGLESV2.dll       Qt5WebChannel.dll
BinaryData           libstdc++-6.dll     Qt5WebEngineCore.dll
comp_client.dll      opengl32sw.dll      Qt5WebEngineWidgets.dll
comp_client.xml      platforms           Qt5Widgets.dll
D3Dcompiler_47.dll   position            Qt5Xml.dll
iconengines          Qt5Core.dll         QtWebEngineProcess.exe
imageformats         Qt5Gui.dll          resources
ImagineClient.exe    Qt5Network.dll      translations
ImagineUpdate.dat    Qt5Positioning.dll  VersionData.txt
ImagineUpdate.exe    Qt5Qml.dll          webaccess.sdat.local
Interface            Qt5Quick.dll        webaccess.sdat.myserv
libEGL.dll           Qt5SerialPort.dll
libgcc_s_sjlj-1.dll  Qt5Svg.dll
</programlisting></para>

<para>
	Once all the files are in place, run the <emphasis>comp_rehash</emphasis> command to generate the new <emphasis>hashlist.dat</emphasis> file in the overlay. This tool will also generate <emphasis>hashlist.ver</emphasis> which is specific to the alternate updater and <emphasis>.compressed</emphasis> files which are needed by the updater. This command should be run again if the contents of the overlay are changed. Here is the command:
</para>

<para><programlisting>
comp_rehash --base /var/www/updates/files/base --overlay /var/www/updates/files/overlay
</programlisting></para>

<para>
	Lastly the root directory <emphasis>/var/www/updates</emphasis> should contain the site to display in the updater. This could be a static page or a dynamic site (with Ruby/PHP/Java/etc).
</para>

</section><!-- Client Files -->

<section>
<title>Version Data</title>

<para>
	The custom updater called the <emphasis>VersionData.txt</emphasis>. It has a <emphasis>[versions]</emphasis> section at the top. This lists a sequence of properties for each server the client may connect to. Each server should include a <emphasis>title</emphasis>, <emphasis>server</emphasis> and <emphasis>tag</emphasis>. The <emphasis>title</emphasis> is the name shown in the updater. The <emphasis>server</emphasis> is the domain name or IP address as well as the port that will be written into the <emphasis>ImagineClient.dat</emphasis>. Finally, the <emphasis>tag</emphasis> is used to describe a section that follows. Here is an example:
</para>

<para><programlisting>
<![CDATA[[versions]
title = My Imagine Server
server = myimagineserver.online:10666
tag = myserv

title = Local Server
server = 127.0.0.1:10666
tag = local

[myserv]
webaccess.sdat

[local]
webaccess.sdat]]>
</programlisting></para>

<para>
	Each section that is tagged lists files that should be copied. For example, in the <emphasis>[myserv]</emphasis> section it lists <emphasis>webaccess.sdat</emphasis>. When the updater launches the client it will copy the file <emphasis>webaccess.dat.myserv</emphasis> to the file named <emphasis>webaccess.sdat</emphasis>. This copies the files with the tag at the end of the name to the file listed. This allows you to change files depending on the client being connected to. This is usually limited to the webaccess.sdat as this is needed for the login box and the in-game website (shop, casino, etc).
</para>

</section><!-- Version Data -->

<section>
<title>Nginx Configuration</title>

<para>
	The files needed for the client updater are now in place. The next step is to configure the web server (Nginx). Create a new file <emphasis>/etc/nginx/sites-available/updates</emphasis> with the following contents:
</para>

<para><programlisting>
<![CDATA[server {
    listen 80;
    listen [::]:80;

    server_name updates.myimagineserver.online;

    root /var/www/updates;

    location / {
        # First attempt to serve request as file, then
        # as directory, then fall back to displaying a 404.
        try_files $uri $uri/ =404;

        add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";
        add_header Cache-Control "must-revalidate, private, no-cache, no-store";
    }

    location ~ \.(php|pl|py|sh|fcgi)$ {
        return 403;
    }

    location ~* ^/files/(.+)$ {
        root /var/www/updates/files;

        try_files /overlay/$1 /base/$1 =404;

        add_header X-Robots-Tag "noindex, nofollow, nosnippet, noarchive";
        add_header Cache-Control "must-revalidate, private, no-cache, no-store";
    }
}]]>
</programlisting></para>

<para>
	Change the <emphasis>server_name</emphasis> setting to match the domain name of your server and configure any sub-domain as needed. This configuration will search for files in <emphasis>/var/www/updates/files/overlay</emphasis> first. If the file is not found it will search in <emphasis>/var/www/updates/files/base</emphasis>. If the file is still not found it will generate a 404. The <emphasis>Cache-Control</emphasis> header is important if using the original updater as this updater will use IE to cache the update files. This can cause update problems when the files are changed. Now enable the configuration and restart Nginx:
</para>

<para><programlisting>
sudo ln -sf /etc/nginx/sites-available/updates /etc/nginx/sites-enabled/updates
sudo service nginx restart
</programlisting></para>

<para>
	The updater should now be functional. Remember to edit the <emphasis>ImagineUpdate.dat</emphasis> to point to the server:
</para>

<para><programlisting>
<![CDATA[[Setting]
BaseURL1 = http://updates.myimagineserver.online/files
Information = http:/updates.myimagineserver.online]]>
</programlisting></para>

</section><!-- Nginx Configuration -->

</section><!-- Client Updater with Nginx -->
