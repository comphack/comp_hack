/**
 * @file libcomp/src/Object.h
 * @ingroup libcomp
 *
 * @author COMP Omega <compomega@tutanota.com>
 *
 * @brief Base class for an object generated by the object generator (objgen).
 *
 * This file is part of the COMP_hack Library (libcomp).
 *
 * Copyright (C) 2012-2016 COMP_hack Team <compomega@tutanota.com>
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Affero General Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#ifndef LIBCOMP_SRC_OBJECT_H
#define LIBCOMP_SRC_OBJECT_H

// Standard C++11 Includes
#include <stdint.h>
#include <functional>
#include <istream>
#include <list>
#include <memory>
#include <ostream>
#include <unordered_map>

// tinyxml2 Includes
#include <PushIgnore.h>
#include <tinyxml2.h>
#include <PopIgnore.h>

namespace libcomp
{

class Packet;
class ReadOnlyPacket;

class ObjectInStream
{
public:
    ObjectInStream(std::istream& _stream) : stream(_stream) { }

    std::istream& stream;
    std::list<uint16_t> dynamicSizes;
};

class ObjectOutStream
{
public:
    ObjectOutStream(std::ostream& _stream) : stream(_stream) { }

    std::ostream& stream;
    std::list<uint16_t> dynamicSizes;
};

class Object
{
public:
    Object();
    virtual ~Object();

    virtual bool IsValid(bool recursive = true) const = 0;

    virtual bool Load(ObjectInStream& stream) = 0;
    virtual bool Save(ObjectOutStream& stream) const  = 0;

    virtual bool Load(std::istream& stream, bool flat = false) = 0;
    virtual bool Save(std::ostream& stream, bool flat = false) const  = 0;

    virtual bool Load(const tinyxml2::XMLDocument& doc,
        const tinyxml2::XMLElement& root) = 0;
    virtual bool Save(tinyxml2::XMLDocument& doc,
        tinyxml2::XMLElement& root) const = 0;

    virtual bool LoadPacket(libcomp::ReadOnlyPacket& p);
    virtual bool SavePacket(libcomp::Packet& p) const;

    virtual uint16_t GetDynamicSizeCount() const = 0;

    static std::list<std::shared_ptr<Object>> LoadBinaryData(
        std::istream& stream, const std::function<
        std::shared_ptr<Object>()>& objectAllocator);

protected:
    const tinyxml2::XMLElement* GetXmlChild(const tinyxml2::XMLElement& root, const std::string name) const;
    const std::list<const tinyxml2::XMLElement*> GetXmlChildren(const tinyxml2::XMLElement& root, const std::string name) const;
    virtual std::unordered_map<std::string, const tinyxml2::XMLElement*>
        GetXmlMembers(const tinyxml2::XMLElement& root) const;
    virtual std::string GetXmlText(const tinyxml2::XMLElement& root) const;
};

} // namespace libcomp

#endif // LIBCOMP_SRC_OBJECT_H
