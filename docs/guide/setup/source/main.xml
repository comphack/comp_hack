<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section>
<title>Building from Source</title>

<section>
<title>Windows</title>

<para>
	This section of the guide will walk the user through building the server from source. The guide assumes the user wants to pull the source with Git for later modifications. There are many programs out there to help you use Git; however, GitKraken was selected for this guide. If you prefer a different choice, please adjust the instructions accordingly.
</para>

<section>
<title>Prerequisites</title>

<para>
<itemizedlist>
	<listitem><para><ulink url="https://visualstudio.microsoft.com/vs/older-downloads/">
		<citetitle>Visual Studio 2015</citetitle></ulink> (newer versions may be possible but have not been tested)</para></listitem>
	<listitem><para><ulink url="https://www.gitkraken.com">
		<citetitle>GitKraken</citetitle></ulink> (any Git client software will work)</para></listitem>
	<listitem><para><ulink url="https://cmake.org">
		<citetitle>CMake</citetitle></ulink></para></listitem>
	<listitem><para><ulink url="https://www.qt.io">
		<citetitle>Qt5 Open Source</citetitle></ulink> (<ulink url="https://www.qt.io/offline-installers"><citetitle>Offline Download</citetitle></ulink>)</para></listitem>
</itemizedlist>
</para>

</section><!-- Prerequisites -->

<section>
<title>Visual Studio 2015</title>

<para>
	It's very important that the user either install Visual Studio 2015 with the Visual C++ features or modify the install to add in these features. Without the support for C++ it is not possible to build the server. See <xref linkend="vs2015cpp" xrefstyle="select: label"/> below for the options needed to enable C++ support.
</para>

<figure id="vs2015cpp"><title>Installing Visual Studio 2015 with C++ support.</title>
<mediaobject><imageobject>
<imagedata fileref="static/vs2015cpp.png"/>
</imageobject></mediaobject></figure>

</section><!-- Visual Studio 2015 -->

<section>
<title>CMake</title>

<para>
	When installing CMake it's very important to add it to the system path. The option to do this during install can be seen in <xref linkend="cmake" xrefstyle="select: label"/>. This will be needed later during the build process.
</para>

<figure id="cmake"><title>Installing CMake into the system path.</title>
<mediaobject><imageobject>
<imagedata fileref="static/cmake.png"/>
</imageobject></mediaobject></figure>

</section><!-- CMake -->

<section>
<title>Qt5</title>

<para>
	Some of the tools use Qt for the GUI (as it works on Windows, macOS and Linux). When installing Qt be sure to select the appropriate MSVC 2015 builds (at least 64-bit but 32-bit can be handy too). Be sure to check <emphasis>Qt WebEngine</emphasis> or the updater will not build. These options can be seen in <xref linkend="qt" xrefstyle="select: label"/>.
</para>

<figure id="qt"><title>Qt5 install components.</title>
<mediaobject><imageobject>
<imagedata fileref="static/qt.png"/>
</imageobject></mediaobject></figure>

</section><!-- Qt5 -->

<section>
<title>Checkout Sources</title>

<para>
	If you plan to contribute to the project, fork the main project. This will commit all changes to your copy of the repository. Later these can be merged into the main project repository with a Pull Request. To fork, click the button seen in <xref linkend="fork_project" xrefstyle="select: label"/>. If you do not plan to contribute to the project, you may use the link for the main repository instead.
</para>

<figure id="fork_project"><title>Forking the project.</title>
<mediaobject><imageobject>
<imagedata fileref="static/fork.png"/>
</imageobject></mediaobject></figure>

<para>
	Once the project has been forked, start GitKraken and clone it from your GitHub account as seen in <xref linkend="clone1" xrefstyle="select: label"/>.
</para>

<figure id="clone1"><title>Cloning a fork off GitHub.</title>
<mediaobject><imageobject>
<imagedata fileref="static/clone1.png" width="90%" scalefit="1"/>
</imageobject></mediaobject></figure>

<para>
	If you wish to clone the main repository instead, find the URL on the GitHub project page and enter it into GitKraken as shown below in <xref linkend="clone2" xrefstyle="select: label"/> and <xref linkend="clone3" xrefstyle="select: label"/>.
</para>

<figure id="clone2"><title>Getting the repository URL off GitHub.</title>
<mediaobject><imageobject>
<imagedata fileref="static/clone2.png"/>
</imageobject></mediaobject></figure>

<figure id="clone3"><title>Cloning the main project off GitHub.</title>
<mediaobject><imageobject>
<imagedata fileref="static/clone3.png" width="90%" scalefit="1"/>
</imageobject></mediaobject></figure>

<para>
	Once the project is cloned you should see a window similar to <xref linkend="clone4" xrefstyle="select: label"/>.
</para>

<figure id="clone4"><title>Project cloned in GitKraken.</title>
<mediaobject><imageobject>
<imagedata fileref="static/clone4.png" width="90%" scalefit="1"/>
</imageobject></mediaobject></figure>

</section><!-- Checkout Sources -->

<section>
<title>Generate Project</title>

<para>
	In the root of the project directory you should see two batch files called <emphasis>vsbuild_x86.bat</emphasis> and <emphasis>vsbuild_x64.bat</emphasis> for 32-bit and 64-bit respectively. These can be edited in a text editor. In this example the Qt5 directory had to be changed on the <emphasis>CMAKE_PREFIX_PATH</emphasis> line for 32-bit:
</para>

<para><programlisting>
set CMAKE_PREFIX_PATH=C:\Qt\5.10.1\msvc2015
cmake -DCMAKE_CONFIGURATION_TYPES="Debug;Release" -G"Visual Studio 14 2015" ..
</programlisting></para>

<para>
	This also needed to be updated for 64-bit as well:
</para>

<para><programlisting>
set CMAKE_PREFIX_PATH=C:\Qt\5.10.1\msvc2015_64
cmake -DCMAKE_CONFIGURATION_TYPES="Debug;Release" -G"Visual Studio 14 2015 Win64" ..
</programlisting></para>

<para>
	Note that this path may very depending on which version of Qt5 was installed and to what location. Please look for the appropriate directory on your install. Run the appropriate batch file and you should get a dialog similar to the following:
</para>

<figure id="project_generation"><title>Project generation with CMake.</title>
<mediaobject><imageobject>
<imagedata fileref="static/project_generation.png" width="90%" scalefit="1"/>
</imageobject></mediaobject></figure>

<para>
	After the CMake generation the <emphasis>comp_hack.sln</emphasis> solution file can be found in the <emphasis>build64</emphasis> directory as shown in <xref linkend="build64" xrefstyle="select: label"/>. The project can then be opened and built in Visual Studio 2015 as shown in <xref linkend="vssolution" xrefstyle="select: label"/>.
</para>

<figure id="build64"><title>Project solution file in the build64 directory.</title>
<mediaobject><imageobject>
<imagedata fileref="static/build64.png"/>
</imageobject></mediaobject></figure>

<figure id="vssolution"><title>Project opened in Visual Studio 2015.</title>
<mediaobject><imageobject>
<imagedata fileref="static/vssolution.png" width="90%" scalefit="1"/>
</imageobject></mediaobject></figure>

</section><!-- Generate Project -->

</section><!-- Windows -->

</section><!-- Building from Source -->
