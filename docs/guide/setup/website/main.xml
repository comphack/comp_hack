<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE section PUBLIC "-//OASIS//DTD DocBook XML V4.5//EN"
	"http://www.oasis-open.org/docbook/xml/4.5/docbookx.dtd">
<section>
<title>Website with PHP &amp; Nginx</title>

<section>
<title>Overview</title>

<para>
	This section of the guide will describe installation and setup of a website server software on an Ubuntu 16.04 LTS (<ulink url="https://www.ubuntu.com">https://www.ubuntu.com</ulink>) system with Nginx, PHP and MariaDB. Installation on other systems should be possible and this guide could be adapted for such a system; however, installation on these systems won't be described here. Similarly, DNS setup, connecting to and maintaining a Linux server, basic Linux commands, basic SQL and web development are out of the scope of this document. Please look elsewhere online for an excellent selection of guides, tutorials and videos on these topics.
</para>

</section><!-- Overview -->

<section>
<title>Installing Nginx</title>

<para>
	You just need to install the package as follows:
</para>

<para><programlisting>
sudo apt-get update
sudo apt-get install nginx
</programlisting></para>

</section><!-- Installing Nginx -->

<section>
<title>Installing PHP</title>

<para>
    The server needs a new version of PHP (7.1+) and can be installed from a PPA. Here is how:
</para>

<para><programlisting>
sudo add-apt-repository ppa:ondrej/php
sudo apt-get update
sudo apt-get install php7.1-fpm php7.1-cli php7.1-mcrypt php7.1-gd php7.1-mysql php7.1-pgsql php7.1-imap php7.1-memcached
sudo apt-get install php7.1-mbstring php7.1-xml php7.1-curl php7.1-bcmath php7.1-sqlite3 php7.1-xdebug
</programlisting></para>

<para>
    Next, install the PHP package manager called composer:
</para>

<para><programlisting>
php -r "readfile('http://getcomposer.org/installer');" | sudo php -- --install-dir=/usr/bin/ --filename=composer
</programlisting></para>

</section><!-- Installing PHP -->

<section>
<title>Installing MariaDB</title>

<para>
    The website software uses Laravel. Laravel needs a new version of MariaDB (10.2+) so this must also be installed from a PPA. Here is how to install the latest version:
</para>

<para><programlisting>
sudo apt-get install software-properties-common
sudo apt-key adv --recv-keys --keyserver hkp://keyserver.ubuntu.com:80 0xF1656F24C74CD1D8
sudo add-apt-repository 'deb [arch=amd64,i386,ppc64el] http://sfo1.mirrors.digitalocean.com/mariadb/repo/10.2/ubuntu xenial main'
sudo apt-get update
sudo apt-get install mariadb-server
</programlisting></para>

<para>
    Next you should enable root access again. To do this edit <emphasis>/etc/mysql/mariadb.conf.d/50-server.cnf</emphasis> and add the following in the <emphasis>[mysqld]</emphasis> section:
</para>

<para><programlisting>
plugin-load-add = auth_socket.so
</programlisting></para>

<para>
    Now restart MariaDB and open the MariaDB console:
</para>

<para><programlisting>
sudo systemctl restart mariadb.service
sudo mysql -u root
</programlisting></para>

<para>
    Lastly create the account and database to be used by the website. Remember to change the password (and the username and database name if you want):
</para>

<para><programlisting>
CREATE USER 'compsite'@'localhost' IDENTIFIED BY 'password';
GRANT ALL PRIVILEGES ON comp_site.* TO 'compsite'@'localhost';
CREATE DATABASE comp_site CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;
</programlisting></para>

</section><!-- Installing MariaDB -->

<section>
<title>Website Install</title>

<para>
	This will install the develop branch of the website. This is bleeding edge and may break. Once it's stable this will be updated to describe how to use a released version. This first section of commands will checkout the website files, install the needed PHP dependencies, generate an application key, and copy the default configuration. Do <emphasis>not</emphasis> re-run the key generation command or wipe out your <emphasis>.env</emphasis> file as this may break account logins. Run these commands for a fresh install:
</para>

<para><programlisting>
sudo chown www-data:www-data /var/www/html
sudo rm /var/www/html/*
cd /var/www
sudo -u www-data -H git clone https://github.com/comphack/website.git html
cd /var/www/html
sudo -u www-data -H composer install --optimize-autoloader
sudo -u www-data -H cp .env.example .env
sudo -u www-data -H php artisan key:generate
sudo -u www-data -H nano .env
</programlisting></para>

<para>
    Now edit the <emphasis>.env</emphasis> file for your site configuration. The important options to change are <emphasis>APP_URL</emphasis>, <emphasis>DB_DATABASE</emphasis>, <emphasis>DB_USERNAME</emphasis>, <emphasis>DB_PASSWORD</emphasis> and <emphasis>COMP_API</emphasis>. The <emphasis>COMP_API</emphasis> points to the channel server on the same server. This may need to be changed if the website is located on a different server.
</para>

<para><programlisting>
APP_NAME=COMP_hack
APP_ENV=production
APP_KEY=
APP_DEBUG=false
APP_URL=https://www.myimagineserver.online

DB_CONNECTION=mysql
DB_HOST=127.0.0.1
DB_PORT=3306
DB_DATABASE=comp_site
DB_USERNAME=compsite
DB_PASSWORD=hackMe

COMP_API=http://127.0.0.1:10999/api
</programlisting></para>

<para>
    After saving the configuration you must run the config cache command. Run this every time the <emphasis>.env</emphasis> file has changed. For example, when you run the second command to setup the database, if you run into migration issues and the account information has not changed you may need to re-run the config cache command.
</para>

<para><programlisting>
sudo -u www-data -H php artisan config:cache
sudo -u www-data -H php artisan migrate
</programlisting></para>

</section><!-- Website Install -->

<section>
<title>Nginx Configuration</title>

<para>
	The files needed for the website are now in place. The next step is to configure the web server (Nginx). Create a new file or edit the file <emphasis>/etc/nginx/sites-available/default</emphasis> with the following contents:
</para>

<para><programlisting>
<![CDATA[server {
    listen 80 default_server;
    listen [::]:80 default_server;

    server_name www.myimagineserver.online;

    root /var/www/html/public;

    charset utf-8;

    add_header X-Frame-Options "SAMEORIGIN";
    add_header X-XSS-Protection "1; mode=block";
    add_header X-Content-Type-Options "nosniff";

    index index.html index.htm index.php;

    location / {
        try_files $uri $uri/ /index.php?$query_string;
    }

    location = /favicon.ico { access_log off; log_not_found off; }
    location = /robots.txt  { access_log off; log_not_found off; }

    error_page 404 /index.php;

    location ~ \.php$ {
        include snippets/fastcgi-php.conf;
        fastcgi_pass unix:/run/php/php7.1-fpm.sock;
    }

    location ~ /\.(?!well-known).* {
        deny all;
    }
}]]>
</programlisting></para>

<para>
	Change the <emphasis>server_name</emphasis> setting to match the domain name of your server and configure any sub-domain as needed. It may be a good idea to configure the site with SSL. This won't be described here. Now enable the configuration and restart Nginx:
</para>

<para><programlisting>
sudo ln -sf /etc/nginx/sites-available/default /etc/nginx/sites-enabled/default
sudo service nginx restart
</programlisting></para>

</section><!-- Nginx Configuration -->

<section>
<title>Wrapping Up</title>

<para>
	The website should now be functional. It would be a good idea to configure the firewall to block access to port 10999 as it is no longer needed by the outside world. Nothing else should be connecting to this port or it may cause issues with the website. You can edit the <emphasis>ImagineUpdate.dat</emphasis> to point to the server:
</para>

<para><programlisting>
<![CDATA[[Setting]
BaseURL1 = http://www.myimagineserver.online/updater
Information = http:/updates.myimagineserver.online]]>
</programlisting></para>

<para>
    To login to the site with an existing account (for example, the default admin account) you must use the claim form. For new accounts use the register function on the site. Go here to claim (fixing your domain name): http://www.myimagineserver.online/claim
</para>

<para>
    Finally, you should point the client <emphasis>webaccess.sdat</emphasis> to the website instead (so you may block access to port 10999 and still use the web-based login). See the updater section for how to edit this file and push the new version. Here is what the configuration may look like:
</para>

<para><programlisting>
<![CDATA[<login = http://www.myimagineserver.online/webauth>]]>
</programlisting></para>

</section><!-- Wrapping Up -->

</section><!-- Website with PHP & Nginx -->
